"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateSimplifiedMarkdown = exports.generateMarkdown = void 0;
const fs_1 = require("fs");
const path_1 = require("path");
const testRunner_1 = require("../testRunner");
function generateMarkdown(results) {
    const markdownFile = new MarkdownFile(true);
    const resultsSortedByLanguage = results.sort((a, b) => {
        if (a.language === b.language)
            return 0;
        // push other solutions to the end
        if (a.language === 'Other Solutions')
            return 1;
        if (b.language === 'Other Solutions')
            return -1;
        return a.language > b.language ? 1 : -1;
    });
    var currentLanguage = null;
    resultsSortedByLanguage.forEach((result) => {
        if (currentLanguage !== result.language) {
            if (currentLanguage !== null) {
                markdownFile.endTable();
            }
            markdownFile.startTable(result);
            currentLanguage = result.language;
        }
        markdownFile.addFrameworkResultToTable(result);
    });
    markdownFile.endTable();
    (0, fs_1.writeFileSync)((0, path_1.resolve)(process.cwd(), 'results.md'), markdownFile.toString(), 'utf-8');
}
exports.generateMarkdown = generateMarkdown;
function generateSimplifiedMarkdown(results, outputFile) {
    const markdownFile = new MarkdownFile();
    markdownFile.startTable();
    markdownFile.addTestResultsToTable(results);
    markdownFile.endTable();
    (0, fs_1.writeFileSync)(outputFile, markdownFile.toString(), 'utf-8');
}
exports.generateSimplifiedMarkdown = generateSimplifiedMarkdown;
class MarkdownFile {
    content = [];
    constructor(includeLegend) {
        if (includeLegend) {
            let intro = `---
title: Federation-compatible subgraph implementations

hide:
  - navigation
---

The following open-source GraphQL server libraries and other solutions support acting as a subgraph in a federated supergraph.

## Table Legend

| Icon | Description                                          |
| ---- | ---------------------------------------------------- |
| üü¢    | Functionality is supported                           |
| ‚ùå    | Critical functionality is NOT supported              |
| üî≤    | Additional federation functionality is NOT supported |

`;
            this.content.push(intro);
        }
    }
    startTable(result) {
        let headers = '<th>Federation 1 Support</th><th>Federation 2 Support</th>';
        if (result) {
            this.content.push('', `## ${result.language}`, '');
            headers = '<th width="300">Library</th>' + headers;
        }
        this.content.push('<table>', '<thead>', `<tr>${headers}</tr>`, '</thead>', '<tbody>');
    }
    endTable() {
        this.content.push('</tbody>', '</table>');
    }
    addFrameworkResultToTable(result) {
        const name = result.fullName || result.name;
        const rows = [
            result.documentation
                ? `<a href="${result.documentation}">${name}</a>`
                : name,
            this.renderTestResultsCell({ fedVersion: 1, testResults: result.tests }),
            this.renderTestResultsCell({ fedVersion: 2, testResults: result.tests }),
        ];
        let tableRow = '<tr>';
        rows.forEach((row) => {
            tableRow += `<td>${row}</td>`;
        });
        tableRow += '</tr>';
        this.content.push(tableRow);
    }
    addTestResultsToTable(results) {
        const rows = [
            this.renderTestResultsCell({ fedVersion: 1, testResults: results }),
            this.renderTestResultsCell({ fedVersion: 2, testResults: results }),
        ];
        let tableRow = '<tr>';
        rows.forEach((row) => {
            tableRow += `<td>${row}</td>`;
        });
        tableRow += '</tr>';
        this.content.push(tableRow);
    }
    renderTestResultsCell({ fedVersion, testResults, }) {
        let cell = '<table>';
        testRunner_1.TESTS.forEach((test) => {
            if (test.fedVersion === fedVersion) {
                cell += `<tr><th>${test.column}</th><td>${testResults[test.assertion]?.success
                    ? 'üü¢'
                    : test.required
                        ? '‚ùå'
                        : 'üî≤'}</td></tr>`;
            }
        });
        cell += '</table>';
        return cell;
    }
    toString() {
        return this.content.join('\n');
    }
}
//# sourceMappingURL=markdown.js.map